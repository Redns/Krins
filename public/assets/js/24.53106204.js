(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{566:function(t,s,n){"use strict";n.r(s);var a=n(12),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"基础知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),n("h5",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),n("ul",[n("li",[t._v("STM32芯片最多拥有"),n("code",[t._v("GPIOA ~ GPIOG")]),t._v("七组端口，每组端口最多拥有"),n("code",[t._v("Pin0 ~ Pin15")]),t._v("共16个引脚")]),t._v(" "),n("li",[t._v("每个I/O端口都可以自由编程，但I/O端口寄存器必须按"),n("code",[t._v("32位字")]),t._v("被访问")]),t._v(" "),n("li",[t._v("每个I/O端口都由"),n("code",[t._v("7个寄存器")]),t._v("来控制")])]),t._v(" "),n("h5",{attrs:{id:"模式分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模式分类"}},[t._v("#")]),t._v(" 模式分类")]),t._v(" "),n("p",[t._v("STM32的IO口具有多种功能，在同一时刻每个I/O口只能有一种状态：")]),t._v(" "),n("p",[n("code",[t._v("推挽输出")]),t._v("：当作普通的IO口即可")]),t._v(" "),n("p",[n("code",[t._v("开漏输出")]),t._v("：本质上是OC门（接地/悬空），IIC通信中会用")]),t._v(" "),n("p",[n("code",[t._v("模拟输入")]),t._v("：板载ADC的输入")]),t._v(" "),n("p",[n("code",[t._v("上/下拉输入")]),t._v("：用来做按键检测之类的操作")]),t._v(" "),n("h3",{attrs:{id:"api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n * @Descript\tGPIO电平输出\n * @param\t\tGPIOx \t\t目标GPIO端口号，GPIOA ~ GPIOG\n * @param \t\tGPIO_Pin \t目标GPIO引脚\n * @param\t\tPinState\t目标引脚状态，GPIO_PIN_SET/GPIO_PIN_RESET\n * @return\t\tvoid\n*/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_GPIO_WritePin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIO_TypeDef"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" GPIOx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" GPIO_Pin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO_PinState PinState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n * @Descript\tGPIO电平输入\n * @param\t\tGPIOx \t\t目标GPIO端口号，GPIOA ~ GPIOG\n * @param \t\tGPIO_Pin \t目标GPIO引脚\n * @return\t\tGPIO引脚状态，GPIO_PIN_SET/GPIO_PIN_RESET\n*/")]),t._v("\nGPIO_PinState "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_GPIO_ReadPin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIO_TypeDef"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" GPIOx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" GPIO_Pin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n * @Descript\tGPIO电平翻转\n * @param \t\tGPIOx\t\t目标GPIO端口号，GPIOA ~ GPIOG\n * @param\t\tGPIO_Pin\t目标GPIO引脚\n * @return\t\tvoid\n*/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_GPIO_TogglePin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIO_TypeDef"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" GPIOx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" GPIO_Pin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br")])]),n("h3",{attrs:{id:"demo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[t._v("#")]),t._v(" Demo")]),t._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//exercise1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_GPIO_WritePin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIOB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO_PIN_8"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO_PIN_SET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_Delay")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_GPIO_WritePin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIOB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO_PIN_8"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO_PIN_RESET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_Delay")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_GPIO_TogglePin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIOB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO_PIN_8"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_Delay")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//exercise2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("keyScan")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_GPIO_ReadPin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIOC"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO_PIN_5"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" GPIO_PIN_RESET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_GPIO_TogglePin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIOA"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO_PIN_8"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_GPIO_ReadPin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIOC"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO_PIN_5"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" GPIO_PIN_RESET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);